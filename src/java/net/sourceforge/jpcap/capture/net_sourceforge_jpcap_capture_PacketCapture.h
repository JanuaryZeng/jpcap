/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class net_sourceforge_jpcap_capture_PacketCapture */

#ifndef _Included_net_sourceforge_jpcap_capture_PacketCapture
#define _Included_net_sourceforge_jpcap_capture_PacketCapture
#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     net_sourceforge_jpcap_capture_PacketCapture
 * Method:    open
 * Signature: (ILjava/lang/String;IZI)V
 */
JNIEXPORT void JNICALL Java_net_sourceforge_jpcap_capture_PacketCapture_open
  (JNIEnv *, jobject, jint, jstring, jint, jboolean, jint);

/*
 * Class:     net_sourceforge_jpcap_capture_PacketCapture
 * Method:    openOffline
 * Signature: (ILjava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_net_sourceforge_jpcap_capture_PacketCapture_openOffline
  (JNIEnv *, jobject, jint, jstring);

/*
 * Class:     net_sourceforge_jpcap_capture_PacketCapture
 * Method:    setFilter
 * Signature: (ILjava/lang/String;Z)V
 */
JNIEXPORT void JNICALL Java_net_sourceforge_jpcap_capture_PacketCapture_setFilter
  (JNIEnv *, jobject, jint, jstring, jboolean);

/*
 * Class:     net_sourceforge_jpcap_capture_PacketCapture
 * Method:    capture
 * Signature: (II)V
 */
JNIEXPORT void JNICALL Java_net_sourceforge_jpcap_capture_PacketCapture_capture
  (JNIEnv *, jobject, jint, jint);

/*
 * Class:     net_sourceforge_jpcap_capture_PacketCapture
 * Method:    close
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_net_sourceforge_jpcap_capture_PacketCapture_close
  (JNIEnv *, jobject, jint);

/*
 * Class:     net_sourceforge_jpcap_capture_PacketCapture
 * Method:    endCapture
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_net_sourceforge_jpcap_capture_PacketCapture_endCapture
  (JNIEnv *, jobject, jint);

/*
 * Class:     net_sourceforge_jpcap_capture_PacketCapture
 * Method:    lookupDevices
 * Signature: ()[Ljava/lang/String;
 */
JNIEXPORT jobjectArray JNICALL Java_net_sourceforge_jpcap_capture_PacketCapture_lookupDevices
  (JNIEnv *, jclass);

/*
 * Class:     net_sourceforge_jpcap_capture_PacketCapture
 * Method:    findDevice
 * Signature: ()Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_net_sourceforge_jpcap_capture_PacketCapture_findDevice
  (JNIEnv *, jobject);

/*
 * Class:     net_sourceforge_jpcap_capture_PacketCapture
 * Method:    getNetwork
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_net_sourceforge_jpcap_capture_PacketCapture_getNetwork
  (JNIEnv *, jobject, jstring);

/*
 * Class:     net_sourceforge_jpcap_capture_PacketCapture
 * Method:    getNetmask
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_net_sourceforge_jpcap_capture_PacketCapture_getNetmask
  (JNIEnv *, jobject, jstring);

/*
 * Class:     net_sourceforge_jpcap_capture_PacketCapture
 * Method:    getLinkLayerType
 * Signature: (I)I
 */
JNIEXPORT jint JNICALL Java_net_sourceforge_jpcap_capture_PacketCapture_getLinkLayerType
  (JNIEnv *, jobject, jint);

/*
 * Class:     net_sourceforge_jpcap_capture_PacketCapture
 * Method:    getSnapshotLength
 * Signature: (I)I
 */
JNIEXPORT jint JNICALL Java_net_sourceforge_jpcap_capture_PacketCapture_getSnapshotLength
  (JNIEnv *, jobject, jint);

/*
 * Class:     net_sourceforge_jpcap_capture_PacketCapture
 * Method:    setupStatistics
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_net_sourceforge_jpcap_capture_PacketCapture_setupStatistics
  (JNIEnv *, jobject, jint);

#ifdef __cplusplus
}
#endif
#endif
